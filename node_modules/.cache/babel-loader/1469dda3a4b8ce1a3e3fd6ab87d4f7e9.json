{"ast":null,"code":"var _jsxFileName = \"/home/erke/workspace/react/crwn-clothing-v2-redux-toolkit/src/components/payment-form/payment-form.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { PaymentFormContainer, FormContainer } from './payment-form.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n    setIsProcessingPayment(true);\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount * 100\n      })\n    }).then(res => res.json());\n    const client_secret = response.paymentIntent.client_secret;\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest'\n        }\n      }\n    });\n    setIsProcessingPayment(false);\n\n    if (paymentResult.error) {\n      console.log(paymentResult.error);\n      alert(paymentResult.error);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PaymentFormContainer, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: paymentHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Credit Card Payment:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        isLoading: isProcessingPayment,\n        buttonType: BUTTON_TYPE_CLASSES.inverted,\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentForm, \"zeZvNGpoSXJVIJ/CUzfiu8Kc5to=\", false, function () {\n  return [useStripe, useElements, useSelector, useSelector];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["/home/erke/workspace/react/crwn-clothing-v2-redux-toolkit/src/components/payment-form/payment-form.component.jsx"],"names":["useState","useSelector","CardElement","useStripe","useElements","selectCartTotal","selectCurrentUser","Button","BUTTON_TYPE_CLASSES","PaymentFormContainer","FormContainer","PaymentForm","stripe","elements","amount","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","then","res","json","client_secret","paymentIntent","paymentResult","confirmCardPayment","payment_method","card","getElement","billing_details","name","displayName","error","console","log","alert","status","inverted"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA,OAAOC,MAAP,IAAiBC,mBAAjB,QAA2C,4BAA3C;AAEA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,uBAApD;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,MAAM,GAAGb,WAAW,CAACI,eAAD,CAA1B;AACA,QAAMU,WAAW,GAAGd,WAAW,CAACK,iBAAD,CAA/B;AACA,QAAM,CAACU,mBAAD,EAAsBC,sBAAtB,IAAgDjB,QAAQ,CAAC,KAAD,CAA9D;;AACA,QAAMkB,cAAc,GAAG,MAAOC,CAAP,IAAa;AAClCA,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAI,CAACR,MAAD,IAAW,CAACC,QAAhB,EACE;AAEFI,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AAEA,UAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAAD,EAA8C;AACxEC,MAAAA,MAAM,EAAE,MADgE;AAExEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+D;AAKxEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,QAAAA,MAAM,EAAEA,MAAM,GAAG;AAAnB,OAAf;AALkE,KAA9C,CAAL,CAMpBc,IANoB,CAMfC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANQ,CAAvB;AAQA,UAAMC,aAAa,GAAGV,QAAQ,CAACW,aAAT,CAAuBD,aAA7C;AAEA,UAAME,aAAa,GAAG,MAAMrB,MAAM,CAACsB,kBAAP,CAA0BH,aAA1B,EAAyC;AACnEI,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAEvB,QAAQ,CAACwB,UAAT,CAAoBnC,WAApB,CADQ;AAEdoC,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAExB,WAAW,GAAGA,WAAW,CAACyB,WAAf,GAA6B;AAD/B;AAFH;AADmD,KAAzC,CAA5B;AASAvB,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;;AAEA,QAAIgB,aAAa,CAACQ,KAAlB,EAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYV,aAAa,CAACQ,KAA1B;AACAG,MAAAA,KAAK,CAACX,aAAa,CAACQ,KAAf,CAAL;AACD,KAHD,MAIK;AACH,UAAIR,aAAa,CAACD,aAAd,CAA4Ba,MAA5B,KAAuC,WAA3C,EAAwD;AACtDD,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF;AACF,GAtCD;;AAwCA,sBACE,QAAC,oBAAD;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,QAAQ,EAAE1B,cAAzB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAEF,mBAAnB;AAAwC,QAAA,UAAU,EAAER,mBAAmB,CAACsC,QAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAvDD;;GAAMnC,W;UACWR,S,EACEC,W,EACFH,W,EACKA,W;;;KAJhBU,W;AAyDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'\n\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\n\nimport Button, { BUTTON_TYPE_CLASSES} from '../button/button.component'\n\nimport { PaymentFormContainer, FormContainer } from './payment-form.styles'\n\nconst PaymentForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n  const paymentHandler = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements)\n      return;\n\n    setIsProcessingPayment(true);\n\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ amount: amount * 100 })\n    }).then(res => res.json());\n\n    const client_secret = response.paymentIntent.client_secret;\n\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest',\n        }\n      }\n    });\n\n    setIsProcessingPayment(false);\n\n    if (paymentResult.error) {\n      console.log(paymentResult.error);\n      alert(paymentResult.error);\n    }\n    else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful');\n      }\n    }\n  }\n\n  return (\n    <PaymentFormContainer>\n      <FormContainer onSubmit={paymentHandler}>\n        <h2>Credit Card Payment:</h2>\n        <CardElement />\n        <Button isLoading={isProcessingPayment} buttonType={BUTTON_TYPE_CLASSES.inverted}>Pay Now</Button>\n      </FormContainer>\n    </PaymentFormContainer>\n  )\n}\n\nexport default PaymentForm;"]},"metadata":{},"sourceType":"module"}