{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: []\n};\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => {\n  return cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    setIsCartOpen(state, action) {\n      state.isCartOpen = action.payload;\n    },\n\n    addItemToCart(state, action) {\n      state.cartItems = addCartItem(state.cartItems, action.payload);\n    },\n\n    removeItemFromCart(state, action) {\n      state.cartItems = removeCartItem(state.cartItems, action.payload);\n    },\n\n    clearItemFromCart(state, action) {\n      state.cartItems = clearCartItem(state.cartItems, action.payload);\n    }\n\n  }\n});\nexport const {\n  setIsCartOpen,\n  addItemToCart,\n  removeItemFromCart,\n  clearItemFromCart\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"sources":["/home/erke/workspace/react/crwn-clothing-v2-redux-toolkit/src/store/cart/cart.reducer.js"],"names":["createSlice","INITIAL_STATE","isCartOpen","cartItems","addCartItem","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","cartSlice","name","initialState","reducers","setIsCartOpen","state","action","payload","addItemToCart","removeItemFromCart","clearItemFromCart","actions","cartReducer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n};\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => {\n  return cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n}\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    setIsCartOpen(state, action) {\n      state.isCartOpen = action.payload;\n    },\n    addItemToCart(state, action) {\n      state.cartItems = addCartItem(state.cartItems, action.payload);\n    },\n    removeItemFromCart(state, action) {\n      state.cartItems = removeCartItem(state.cartItems, action.payload);\n    },\n    clearItemFromCart(state, action) {\n      state.cartItems = clearCartItem(state.cartItems, action.payload);\n    },\n  }\n})\n\nexport const { setIsCartOpen, addItemToCart, removeItemFromCart, clearItemFromCart } = cartSlice.actions;\n\nexport const cartReducer = cartSlice.reducer;\n\n"]},"metadata":{},"sourceType":"module"}